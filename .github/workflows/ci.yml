name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name : Julia ${{ matrix.version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1.11'
        os:
          - ubuntu-22.04
        arch:
          - x64
        cuda: [12.4]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Julia 
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - name: Install CMAKE
        run: |
          mkdir -p $HOME/.local && \
          wget https://github.com/Kitware/CMake/releases/download/v3.30.7/cmake-3.30.7-linux-x86_64.sh --no-check-certificate && \
          sh cmake-3.30.7-linux-x86_64.sh --skip-license --prefix=$HOME/.local
          echo "export LD_LIBRARY_PATH=$HOME/.local/lib:$HOME/.local/cuda-12.4/lib64:\$LD_LIBRARY_PATH" > $HOME/.env
      - name: Install CUDA
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb --no-check-certificate
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-toolkit-12-4
      - name: CUDA.jl for ${{ matrix.cuda }}
        run: |
          sudo julia -e '#= make bundled depot non-writable (JuliaLang/Pkg.jl#4120) =# \
                    bundled_depot = last(DEPOT_PATH); \
                    run(`find $bundled_depot/compiled -type f -writable -exec chmod -w \{\} \;`); \
                    #= configure the preference =# \
                    env = "/usr/local/share/julia/environments/v$(VERSION.major).$(VERSION.minor)"; \
                    mkpath(env); \
                    write("$env/LocalPreferences.toml", \
                          "[CUDA_Runtime_jll]\nversion = \"'${{ matrix.cuda }}'\""); \
                    \
                    #= install the JLL =# \
                    using Pkg; \
                    Pkg.add("CUDA_Runtime_jll"); \
                    #= revert bundled depot changes =# \
                    run(`find $bundled_depot/compiled -type f -writable -exec chmod +w \{\} \;`)' && \
          #= demote the JLL to an [extras] dep =# \
          find /usr/local/share/julia/environments -name Project.toml -exec sed -i 's/deps/extras/' {} + && \
          #= remove nondeterminisms =# \
          cd /usr/local/share/julia && \
          rm -rf compiled registries scratchspaces logs && \
          find -exec touch -h -d "@0" {} + && \
          touch -h -d "@0" /usr/local/share

          # install CUDA.jl itself
          RUN julia -e 'using Pkg; pkg"add '${PACKAGE_SPEC_CUDA}'"; \
                        using CUDA; CUDA.precompile_runtime()'
      - name: PreInstall
        run: |
          julia -e 'using Pkg; Pkg.add("CUTENSOR_jll")'
          julia -e 'using Pkg; Pkg.add("NCCL_jll")'
          julia -e 'using Pkg; Pkg.add("legate_jll");'
          julia -e 'using Pkg; Pkg.add("CUDA_Driver_jll");'
          julia -e 'using Pkg; Pkg.add("Libdl");'
      - name: Get Paths
        run: |
          julia -e 'using NCCL_jll; println(joinpath(NCCL_jll.artifact_dir, "lib"))' > $HOME/.local/NCCL_PATH.txt
          JULIA_NCCL_PATH=$(cat $HOME/.local/NCCL_PATH.txt) && \
            echo "export JULIA_NCCL_PATH=$JULIA_NCCL_PATH" >> $HOME/.env
          julia -e 'using CUTENSOR_jll; println(joinpath(CUTENSOR_jll.artifact_dir, "lib"))' > $HOME/.local/CUTENSOR_PATH.txt
          JULIA_CUTENSOR_PATH=$(cat $HOME/.local/CUTENSOR_PATH.txt) && \
            echo "export JULIA_CUTENSOR_PATH=$JULIA_CUTENSOR_PATH" >> $HOME/.env
          julia -e 'using Libdl; using CUDA_Driver_jll; \
              Libdl.dlopen(joinpath(CUDA_Driver_jll.artifact_dir, "lib", "libcuda.so"), Libdl.RTLD_GLOBAL | Libdl.RTLD_NOW); \
              using legate_jll; \
              println(joinpath(legate_jll.artifact_dir))' > $HOME/.local/LEGATE_PATH.txt
          LEGATE_CUSTOM_INSTALL_LOCATION=$(cat $HOME/.local/LEGATE_PATH.txt) && \
            echo "export LEGATE_CUSTOM_INSTALL_LOCATION=$LEGATE_CUSTOM_INSTALL_LOCATION" >> $HOME/.env
      - name: Install Dependencies
        env: 
          JULIA_NUM_THREADS: auto
          LEGATE_CUSTOM_INSTALL: 1
          LEGATE_DEVELOP_MODE: 1
          PATH: /usr/local/cuda/bin/:$PATH
        run: |
          source $HOME/.env && julia -t 2 -e '
          using Pkg;
          Pkg.activate(".");
          Pkg.rm("Legate");
          Pkg.add(url="https://github.com/JuliaLegate/Legate.jl", rev="main");
          Pkg.build(verbose = true);
          ' 
      - name: Run Tests
        env: 
          LEGATE_AUTO_CONFIG: 0
          LEGATE_SHOW_CONFIG: 1
          LEGATE_CONFIG: "--logging 2"
        run: |
          echo "LEGATE_AUTO_CONFIG = $LEGATE_AUTO_CONFIG"
          echo "LEGATE_SHOW_CONFIG = $LEGATE_SHOW_CONFIG"
          echo "LEGATE_CONFIG = $LEGATE_CONFIG"  
          julia -e 'using Pkg; Pkg.activate("."); Pkg.test();'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: JuliaLegate/cuNumeric.jl
  docs:
    name : Documentation
    permissions:
      actions: write
      contents: write
      pull-requests: read
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Install docs dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.instantiate()'
      - name: Build and deploy docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If authenticating with GitHub Actions token
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }} # If authenticating with SSH deploy key
        run: julia --project=docs/ docs/make.jl





