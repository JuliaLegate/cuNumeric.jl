# Conda CI test. This will build the workflow using the conda build path.
# This test only occurs if build.jl changes.
name: Conda test
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build instead'
        required: false
        default: ''
      mark_as_latest:
        description: 'Mark as latest'
        type: boolean
        required: false
        default: false
  push:
    paths:
      - 'deps/build.jl'
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    paths:
      - 'deps/build.jl'
jobs:
  docs:
    name : Conda Test
    permissions:
      actions: read
      contents: read
      pull-requests: read
      statuses: read
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Get package spec
        id: pkg
        run: |
          if [[ -n "${{ inputs.tag }}" ]]; then
            echo "ref=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "name=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "name=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "branch" ]]; then
            echo "ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "name=dev" >> $GITHUB_OUTPUT
          fi

          VERSION=$(grep "^version = " Project.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'
      - uses: julia-actions/cache@v2
      - name: Create Conda environment
        run: |
          mkdir -p ~/miniconda3
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
          bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
          rm ~/miniconda3/miniconda.sh
          source ~/miniconda3/bin/activate
          conda init --all
          export PATH="$HOME/miniconda/bin:$PATH"
          echo "PATH=$HOME/miniconda/bin:$PATH" >> $GITHUB_ENV
          conda create --name myenv python=3.10 -y
          conda activate myenv
          CONDA_OVERRIDE_CUDA="12.4" conda install -c conda-forge -c legate cupynumeric -y

      - name: Setup CUDA runtime version
        run: |
          julia --color=yes -e '
              using Pkg
              Pkg.add("CUDA")
              using CUDA
              CUDA.set_runtime_version!(v"12.4")
          '
      - name: Set LD_LIBRARY_PATH for CUDA_Driver_jll
        run: |
          echo "LD_LIBRARY_PATH=$(julia -e 'using Pkg; \
            Pkg.add("CUDA_Driver_jll"); \
            using CUDA_Driver_jll; \
            print(joinpath(CUDA_Driver_jll.artifact_dir, "lib"))' \
          ):$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Setup cuNumeric.jl and Legate.jl
        env:
          LEGATE_AUTO_CONFIG: 0
          CUNUMERIC_LEGATE_CONDA_INSTALL: 1
        run: |
          julia --color=yes -e '
              using Pkg;
              Pkg.add(PackageSpec(url = "https://github.com/JuliaLegate/Legate.jl", rev = "doc-test"))
          '
          julia --color=yes -e '
              using Pkg;
              Pkg.add(PackageSpec(url = "https://github.com/JuliaLegate/cuNumeric.jl", rev = "${{ steps.pkg.outputs.ref }}"))
          '
      - name: Perform Test
        env: 
            LEGATE_AUTO_CONFIG: 0
        run: |
         julia --color=yes -e 'using Pkg; Pkg.test("cuNumeric")'

     