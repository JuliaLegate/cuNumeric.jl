import{_ as p,C as h,c as r,o as k,aA as t,j as i,G as e,a as n,w as l}from"./chunks/framework.BLF_ld5H.js";const z=JSON.parse('{"title":"Public API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),d={name:"api.md"},o={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""};function P(S,s,O,M,V,R){const a=h("Badge");return k(),r("div",null,[s[96]||(s[96]=t('<h1 id="Public-API" tabindex="-1">Public API <a class="header-anchor" href="#Public-API" aria-label="Permalink to &quot;Public API {#Public-API}&quot;">â€‹</a></h1><p>User facing functions supported by cuNumeric.jl</p><ul><li><a href="./api#Public-API">Public API</a><ul><li><a href="./api#Initializing-NDArrays">Initializing NDArrays</a></li><li><a href="./api#Slicing-NDArrays">Slicing NDArrays</a></li><li><a href="./api#Linear-Algebra-Operations">Linear Algebra Operations</a></li><li><a href="./api#Unary-Operations">Unary Operations</a></li><li><a href="./api#Unary-Reductions">Unary Reductions</a></li><li><a href="./api#Binary-Operations">Binary Operations</a></li><li><a href="./api#Timing-cuNumeric.jl-Code">Timing cuNumeric.jl Code</a></li></ul></li></ul>',3)),i("details",o,[i("summary",null,[s[0]||(s[0]=i("a",{id:"cuNumeric.versioninfo-Tuple{}",href:"#cuNumeric.versioninfo-Tuple{}"},[i("span",{class:"jlbinding"},"cuNumeric.versioninfo")],-1)),s[1]||(s[1]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints the cuNumeric build configuration summary, including package metadata, Julia and compiler version, and paths to core dependencies.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/cuNumeric.jl#L130-L135",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i("details",E,[i("summary",null,[s[4]||(s[4]=i("a",{id:"Base.:--Tuple{Union{Float32, Float64, Int32, Int64}, NDArray}",href:"#Base.:--Tuple{Union{Float32, Float64, Int32, Int64}, NDArray}"},[i("span",{class:"jlbinding"},"Base.:-")],-1)),s[5]||(s[5]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base.:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base.:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base.:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lhs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rhs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform subtraction involving an <code>NDArray</code> and a scalar or between two NDArrays.</p><ul><li><p><code>val - arr</code> subtracts <code>val</code> by <code>arr</code>.</p></li><li><p><code>arr - val</code> subtracts scalar <code>val</code> from each element of <code>arr</code>.</p></li><li><p>Element-wise subtraction is supported between two NDArrays.</p></li></ul><p>Broadcasting is also supported for these operations.</p><p><strong>Examples</strong></p><div class="language-@setup vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@setup</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lhs = cuNumeric.ones(4, 4)</span></span>
<span class="line"><span>rhs = cuNumeric.ones(4, 4)</span></span></code></pre></div><div class="language-@repl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@repl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lhs - 3</span></span>
<span class="line"><span>3 - rhs</span></span>
<span class="line"><span>lhs - rhs</span></span></code></pre></div>`,7)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L547-L570",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),i("details",g,[i("summary",null,[s[8]||(s[8]=i("a",{id:"Base.:/-Tuple{NDArray, Union{Float32, Float64, Int32, Int64}}",href:"#Base.:/-Tuple{NDArray, Union{Float32, Float64, Int32, Int64}}"},[i("span",{class:"jlbinding"},"Base.:/")],-1)),s[9]||(s[9]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base.:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scalar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Broadcast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">broadcasted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scalar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the element-wise multiplication of <code>arr</code> by the scalar reciprocal <code>1 / val</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L644-L655",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i("details",c,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Base.:==-Tuple{NDArray, Array}",href:"#Base.:==-Tuple{NDArray, Array}"},[i("span",{class:"jlbinding"},"Base.:==")],-1)),s[13]||(s[13]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, julia_arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(julia_arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compare an <code>NDArray</code> and a Julia <code>Array</code> for element-wise equality.</p><p>Returns <code>true</code> if both arrays have the same shape and all corresponding elements are equal. Returns <code>false</code> otherwise (including if sizes differ, with a warning).</p><p>The second method simply calls the first with flipped arguments.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia_arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> julia_arr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia_arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia_arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> julia_arr2</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L836-L856",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),i("details",y,[i("summary",null,[s[16]||(s[16]=i("a",{id:"Base.:==-Tuple{NDArray, NDArray}",href:"#Base.:==-Tuple{NDArray, NDArray}"},[i("span",{class:"jlbinding"},"Base.:==")],-1)),s[17]||(s[17]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if two NDArrays are equal element-wise.</p><p>Returns <code>true</code> if both arrays have the same shape and all corresponding elements are equal. Currently supports arrays up to 3 dimensions. For higher dimensions, returns <code>false</code> with a warning.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span></code></pre></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L799-L815",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),i("details",u,[i("summary",null,[s[20]||(s[20]=i("a",{id:"Base.Broadcast.broadcasted-Tuple{typeof/, NDArray, NDArray}",href:"#Base.Broadcast.broadcasted-Tuple{typeof/, NDArray, NDArray}"},[i("span",{class:"jlbinding"},"Base.Broadcast.broadcasted")],-1)),s[21]||(s[21]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Broadcast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">broadcasted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), lhs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rhs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform element-wise division of two NDArrays.</p><p><strong>Examples</strong></p><div class="language-@repl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@repl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line highlighted"><span></span></span>
<span class="line"><span>&lt;Badge type=&quot;info&quot; class=&quot;source-link&quot; text=&quot;source&quot;&gt;&lt;a href=&quot;https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L684-L695&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt;&lt;/Badge&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/details&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;details class=&#39;jldocstring custom-block&#39; open&gt;</span></span>
<span class="line"><span>&lt;summary&gt;&lt;a id=&#39;Base.Broadcast.broadcasted-Tuple{typeof/, Union{Float32, Float64, Int32, Int64}, NDArray}&#39; href=&#39;#Base.Broadcast.broadcasted-Tuple{typeof/, Union{Float32, Float64, Int32, Int64}, NDArray}&#39;&gt;&lt;span class=&quot;jlbinding&quot;&gt;Base.Broadcast.broadcasted&lt;/span&gt;&lt;/a&gt; &lt;Badge type=&quot;info&quot; class=&quot;jlObjectType jlMethod&quot; text=&quot;Method&quot; /&gt;&lt;/summary&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`julia</span></span>
<span class="line"><span>Base.Broadcast.broadcasted(::typeof(/), val::Scalar, arr::NDArray)</span></span></code></pre></div><p>Throws an error since element-wise division of a scalar by an NDArray is not supported yet.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2 ./ arr # ERROR</span></span></code></pre></div>`,7)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[22]||(s[22]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L667-L677",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),i("details",F,[i("summary",null,[s[24]||(s[24]=i("a",{id:"Base.copy-Tuple{NDArray}",href:"#Base.copy-Tuple{NDArray}"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[25]||(s[25]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create and return a deep copy of the given <code>NDArray</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[26]||(s[26]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L764-L776",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),i("details",b,[i("summary",null,[s[28]||(s[28]=i("a",{id:"Base.eltype-Tuple{NDArray}",href:"#Base.eltype-Tuple{NDArray}"},[i("span",{class:"jlbinding"},"Base.eltype")],-1)),s[29]||(s[29]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the element type of the <code>NDArray</code>.</p><p><strong>Internal API</strong></p><p>This method uses <code>nda_array_type_code</code> internally to map to the appropriate Julia element type.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[30]||(s[30]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L48-L56",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),i("details",C,[i("summary",null,[s[32]||(s[32]=i("a",{id:"Base.firstindex-Tuple{NDArray, Int64}",href:"#Base.firstindex-Tuple{NDArray, Int64}"},[i("span",{class:"jlbinding"},"Base.firstindex")],-1)),s[33]||(s[33]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">firstindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lastindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lastindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Provide the first and last valid indices along a given dimension <code>dim</code> for <code>NDArray</code>.</p><ul><li><p><code>firstindex</code> always returns 1, since Julia arrays are 1-indexed.</p></li><li><p><code>lastindex</code> returns the size of the array along the specified dimension.</p></li><li><p><code>lastindex(arr)</code> returns the size along the first dimension.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">firstindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lastindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lastindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span></code></pre></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[34]||(s[34]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L129-L147",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),i("details",m,[i("summary",null,[s[36]||(s[36]=i("a",{id:"Base.isapprox-Tuple{AbstractArray, NDArray}",href:"#Base.isapprox-Tuple{AbstractArray, NDArray}"},[i("span",{class:"jlbinding"},"Base.isapprox")],-1)),s[37]||(s[37]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; atol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rtol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, julia_array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; atol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rtol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(julia_array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; atol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rtol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Approximate equality comparison between two <code>NDArray</code>s or between an <code>NDArray</code> and a Julia <code>AbstractArray</code>.</p><p>Returns <code>true</code> if the arrays have the same shape and all corresponding elements are approximately equal within the given absolute tolerance <code>atol</code> and relative tolerance <code>rtol</code>.</p><p>The second and third methods handle comparisons between <code>NDArray</code> and Julia arrays by forwarding to a common comparison function.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia_arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1, arr2)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1, julia_arr)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isapprox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(julia_arr, arr2)</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[38]||(s[38]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L947-L969",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),i("details",A,[i("summary",null,[s[40]||(s[40]=i("a",{id:"Base.show-Tuple{IO, NDArray}",href:"#Base.show-Tuple{IO, NDArray}"},[i("span",{class:"jlbinding"},"Base.show")],-1)),s[41]||(s[41]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MIME&quot;text/plain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Display a summary of the <code>NDArray</code> showing its element type and dimensions.</p><p>These methods customize how <code>NDArray</code> instances appear in the REPL and in text/plain contexts.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[42]||(s[42]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L154-L166",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),i("details",D,[i("summary",null,[s[44]||(s[44]=i("a",{id:"Base.size-Tuple{NDArray}",href:"#Base.size-Tuple{NDArray}"},[i("span",{class:"jlbinding"},"Base.size")],-1)),s[45]||(s[45]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the size of the given <code>NDArray</code>.</p><ul><li><p><code>Base.size(arr)</code> returns a tuple of dimensions of the array.</p></li><li><p><code>Base.size(arr, dim)</code> returns the size of the array along the specified dimension <code>dim</code>.</p></li></ul><p>These override Base&#39;s size methods for the <code>NDArray</code> type, using the underlying cuNumeric API to query array shape.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[46]||(s[46]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L108-L126",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),i("details",N,[i("summary",null,[s[48]||(s[48]=i("a",{id:"LinearAlgebra.mul!-Tuple{NDArray, NDArray, NDArray}",href:"#LinearAlgebra.mul!-Tuple{NDArray, NDArray, NDArray}"},[i("span",{class:"jlbinding"},"LinearAlgebra.mul!")],-1)),s[49]||(s[49]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[51]||(s[51]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mul!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the matrix multiplication (dot product) of <code>arr1</code> and <code>arr2</code>, storing the result in <code>out</code>.</p><p>This function performs the operation in-place, modifying <code>out</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearAlgebra</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mul!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, a, b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out</span></span></code></pre></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[50]||(s[50]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L744-L759",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),i("details",B,[i("summary",null,[s[52]||(s[52]=i("a",{id:"Random.rand!-Tuple{NDArray}",href:"#Random.rand!-Tuple{NDArray}"},[i("span",{class:"jlbinding"},"Random.rand!")],-1)),s[53]||(s[53]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[55]||(s[55]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Fills <code>arr</code> with Float64s uniformly at random.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cuNumeric.rand(NDArray, dims::Int...)</span></span>
<span class="line"><span>cuNumeric.rand(NDArray, dims::Tuple)</span></span></code></pre></div><p>Create a new <code>NDArray</code> of element type Float64, filled with uniform random values.</p><p>This function uses the same signature as <code>Base.rand</code> with a custom backend, and currently supports only <code>Float64</code> with uniform distribution (<code>code = 0</code>).</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A)</span></span></code></pre></div>`,7)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[54]||(s[54]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L450-L469",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),i("details",T,[i("summary",null,[s[56]||(s[56]=i("a",{id:"cuNumeric.LegateType-Tuple{Type}",href:"#cuNumeric.LegateType-Tuple{Type}"},[i("span",{class:"jlbinding"},"cuNumeric.LegateType")],-1)),s[57]||(s[57]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LegateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Converts a Julia type <code>T</code> to the corresponding Legate type.</p><p><strong>Internal API</strong></p>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[58]||(s[58]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L59-L65",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),i("details",_,[i("summary",null,[s[60]||(s[60]=i("a",{id:"cuNumeric.add!-Tuple{NDArray, NDArray, NDArray}",href:"#cuNumeric.add!-Tuple{NDArray, NDArray, NDArray}"},[i("span",{class:"jlbinding"},"cuNumeric.add!")],-1)),s[61]||(s[61]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[63]||(s[63]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute element-wise addition of <code>arr1</code> and <code>arr2</code> storing the result in <code>out</code>.</p><p>This is an in-place operation and is used to support <code>.+=</code> style syntax.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> similar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, a, b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out</span></span></code></pre></div>`,5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[62]||(s[62]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L704-L719",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),i("details",f,[i("summary",null,[s[64]||(s[64]=i("a",{id:"cuNumeric.as_type-Union{Tuple{T}, Tuple{NDArray, Type{T}}} where T",href:"#cuNumeric.as_type-Union{Tuple{T}, Tuple{NDArray, Type{T}}} where T"},[i("span",{class:"jlbinding"},"cuNumeric.as_type")],-1)),s[65]||(s[65]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NDArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span></code></pre></div><p>Convert the element type of <code>arr</code> to type <code>T</code>, returning a new <code>NDArray</code> with elements cast to <code>T</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>arr::NDArray</code>: Input array.</p></li><li><p><code>t::Type{T}</code>: Target element type.</p></li></ul><p><strong>Returns</strong></p><p>A new <code>NDArray</code> with the same shape as <code>arr</code> but with elements of type <code>T</code>.</p><p><strong>Examples</strong></p><div class="language-@repl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@repl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Badge type=&quot;info&quot; class=&quot;source-link&quot; text=&quot;source&quot;&gt;&lt;a href=&quot;https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L68-L84&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt;&lt;/Badge&gt;</span></span>
<span class="line highlighted"><span></span></span>
<span class="line"><span>&lt;/details&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;details class=&#39;jldocstring custom-block&#39; open&gt;</span></span>
<span class="line"><span>&lt;summary&gt;&lt;a id=&#39;cuNumeric.assign-Tuple{NDArray, NDArray}&#39; href=&#39;#cuNumeric.assign-Tuple{NDArray, NDArray}&#39;&gt;&lt;span class=&quot;jlbinding&quot;&gt;cuNumeric.assign&lt;/span&gt;&lt;/a&gt; &lt;Badge type=&quot;info&quot; class=&quot;jlObjectType jlMethod&quot; text=&quot;Method&quot; /&gt;&lt;/summary&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`julia</span></span>
<span class="line"><span>assign(arr::NDArray, other::NDArray)</span></span></code></pre></div><p>Assign the contents of <code>other</code> to <code>arr</code> element-wise.</p><p>This function overwrites the data in <code>arr</code> with the values from <code>other</code>. Both arrays must have the same shape.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,12)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[66]||(s[66]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L781-L796",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),i("details",v,[i("summary",null,[s[68]||(s[68]=i("a",{id:"cuNumeric.compare-Tuple{AbstractArray, NDArray, Any}",href:"#cuNumeric.compare-Tuple{AbstractArray, NDArray, Any}"},[i("span",{class:"jlbinding"},"cuNumeric.compare")],-1)),s[69]||(s[69]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, max_diff)</span></span></code></pre></div><p><strong>Internal API</strong></p><p>Compare two arrays <code>x</code> and <code>y</code> for approximate equality within a maximum difference <code>max_diff</code>.</p><p>Supports comparisons between:</p><ul><li><p>an <code>NDArray</code> and a Julia <code>AbstractArray</code></p></li><li><p>two <code>NDArray</code>s</p></li><li><p>a Julia <code>AbstractArray</code> and an <code>NDArray</code></p></li></ul><p>Returns <code>true</code> if the arrays have the same shape and element type (for mixed types), and all corresponding elements differ by no more than <code>max_diff</code>.</p><p>Emits warnings when array sizes or element types differ.</p><p><strong>Notes</strong></p><ul><li><p>This is an internal API used by higher-level approximate equality functions.</p></li><li><p>Does not support relative tolerance (<code>rtol</code>).</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Checks size compatibility.</p></li><li><p>Checks element type compatibility for <code>NDArray</code> vs Julia array.</p></li><li><p>Iterates over elements using <code>CartesianIndices</code> to compare element-wise difference.</p></li></ul>',11)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[70]||(s[70]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L879-L904",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),i("details",j,[i("summary",null,[s[72]||(s[72]=i("a",{id:"cuNumeric.full-Union{Tuple{N}, Tuple{T}, Tuple{NTuple{N, Int64}, T}} where {T, N}",href:"#cuNumeric.full-Union{Tuple{N}, Tuple{T}, Tuple{NTuple{N, Int64}, T}} where {T, N}"},[i("span",{class:"jlbinding"},"cuNumeric.full")],-1)),s[73]||(s[73]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[75]||(s[75]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val)</span></span></code></pre></div><p>Create an <code>NDArray</code> filled with the scalar value <code>val</code>, with the shape specified by <code>dims</code>.</p><p><strong>Examples</strong></p><div class="language-@repl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@repl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line highlighted"><span></span></span>
<span class="line"><span>&lt;Badge type=&quot;info&quot; class=&quot;source-link&quot; text=&quot;source&quot;&gt;&lt;a href=&quot;https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L368-L378&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt;&lt;/Badge&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/details&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;details class=&#39;jldocstring custom-block&#39; open&gt;</span></span>
<span class="line"><span>&lt;summary&gt;&lt;a id=&#39;cuNumeric.multiply!-Tuple{NDArray, NDArray, NDArray}&#39; href=&#39;#cuNumeric.multiply!-Tuple{NDArray, NDArray, NDArray}&#39;&gt;&lt;span class=&quot;jlbinding&quot;&gt;cuNumeric.multiply!&lt;/span&gt;&lt;/a&gt; &lt;Badge type=&quot;info&quot; class=&quot;jlObjectType jlMethod&quot; text=&quot;Method&quot; /&gt;&lt;/summary&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`julia</span></span>
<span class="line"><span>multiply!(out::NDArray, arr1::NDArray, arr2::NDArray)</span></span></code></pre></div><p>Compute element-wise multiplication of <code>arr1</code> and <code>arr2</code>, storing the result in <code>out</code>.</p><p>This function performs the operation in-place, modifying <code>out</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> similar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, a, b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out</span></span></code></pre></div>`,8)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[74]||(s[74]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L724-L739",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),i("details",x,[i("summary",null,[s[76]||(s[76]=i("a",{id:"cuNumeric.ones-Union{Tuple{T}, Tuple{Type{T}, NTuple{N, Int64} where N}} where T",href:"#cuNumeric.ones-Union{Tuple{T}, Tuple{Type{T}, NTuple{N, Int64} where N}} where T"},[i("span",{class:"jlbinding"},"cuNumeric.ones")],-1)),s[77]||(s[77]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[79]||(s[79]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64,] dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64,] dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create an NDArray with element type <code>T</code>, of all zeros with size specified by <code>dims</code>. This function has the same signature as <code>Base.ones</code>, so be sure to call it as <code>cuNuermic.ones</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ones</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Int32, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[78]||(s[78]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L420-L433",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})]),i("details",I,[i("summary",null,[s[80]||(s[80]=i("a",{id:"cuNumeric.slice_array-Union{NTuple{N, Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}}, Tuple{N}} where N",href:"#cuNumeric.slice_array-Union{NTuple{N, Tuple{Union{Nothing, Int64}, Union{Nothing, Int64}}}, Tuple{N}} where N"},[i("span",{class:"jlbinding"},"cuNumeric.slice_array")],-1)),s[81]||(s[81]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slice_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vararg{Tuple{Union{Int,Nothing},Union{Int,Nothing}},N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N}</span></span></code></pre></div><p><strong>Internal API</strong></p><p>Constructs a vector of <code>cuNumeric.Slice</code> objects from a variable number of <code>(start, stop)</code> tuples.</p><p>Each tuple corresponds to a dimension slice, using <code>slice</code> internally.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[82]||(s[82]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L200-L208",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[82]})]),i("details",L,[i("summary",null,[s[84]||(s[84]=i("a",{id:"cuNumeric.to_cpp_index",href:"#cuNumeric.to_cpp_index"},[i("span",{class:"jlbinding"},"cuNumeric.to_cpp_index")],-1)),s[85]||(s[85]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[87]||(s[87]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to_cpp_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, int_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UInt64)</span></span></code></pre></div><p><strong>Internal API</strong></p><p>Converts a single Julia 1-based index <code>d</code> to a zero-based C++ style index wrapped in <code>StdVector</code>.</p>',3)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[86]||(s[86]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L39-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[86]})]),i("details",w,[i("summary",null,[s[88]||(s[88]=i("a",{id:"cuNumeric.to_cpp_index-Union{Tuple{NTuple{N, Int64}}, Tuple{N}, Tuple{NTuple{N, Int64}, Type}} where N",href:"#cuNumeric.to_cpp_index-Union{Tuple{NTuple{N, Int64}}, Tuple{N}, Tuple{NTuple{N, Int64}, Type}} where N"},[i("span",{class:"jlbinding"},"cuNumeric.to_cpp_index")],-1)),s[89]||(s[89]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[91]||(s[91]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to_cpp_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dims{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, int_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UInt64) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N}</span></span></code></pre></div><p><strong>Internal API</strong></p><p>Converts a Julia 1-based index tuple <code>idx</code> to a zero-based C++ style index wrapped in <code>StdVector</code> of the specified integer type.</p><p>Each element of <code>idx</code> is decremented by 1 to adjust from Juliaâ€™s 1-based indexing to C++ 0-based indexing.</p>',4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[90]||(s[90]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L26-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[90]})]),i("details",q,[i("summary",null,[s[92]||(s[92]=i("a",{id:"cuNumeric.zeros-Union{Tuple{T}, Tuple{N}, Tuple{Type{T}, NTuple{N, Int64}}} where {N, T}",href:"#cuNumeric.zeros-Union{Tuple{T}, Tuple{N}, Tuple{Type{T}, NTuple{N, Int64}}} where {N, T}"},[i("span",{class:"jlbinding"},"cuNumeric.zeros")],-1)),s[93]||(s[93]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64,] dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64,] dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create an NDArray with element type <code>T</code>, of all zeros with size specified by <code>dims</code>. This function mirrors the signature of <code>Base.zeros</code>, and defaults to <code>Float64</code> when the type is omitted.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Int32, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[94]||(s[94]=[i("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92adc6d5d8670371b667d5a9cb851a5238ebe261/src/ndarray.jl#L389-L402",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[94]})]),s[97]||(s[97]=t(`<h2 id="Initializing-NDArrays" tabindex="-1">Initializing NDArrays <a class="header-anchor" href="#Initializing-NDArrays" aria-label="Permalink to &quot;Initializing NDArrays {#Initializing-NDArrays}&quot;">â€‹</a></h2><p>The CuPyNumeric C++ API only supports generating Float64 random numbers. The example below shows how you can get Float32 random numbers by casting. We plan to make this easier through <code>Base.convert</code> or by getting Float32 generating added to CuPyNumeric.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr_fp64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr_fp32 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr_fp64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LegateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32))</span></span></code></pre></div><h4 id="Methods-to-intiailize-NDArrays" tabindex="-1">Methods to intiailize NDArrays <a class="header-anchor" href="#Methods-to-intiailize-NDArrays" aria-label="Permalink to &quot;Methods to intiailize NDArrays {#Methods-to-intiailize-NDArrays}&quot;">â€‹</a></h4><ul><li><p><code>cuNumeric.zeros</code></p></li><li><p><code>cuNumeric.full</code></p></li><li><p><code>Random.rand!</code></p></li><li><p><code>Random.rand</code></p></li></ul><h2 id="Slicing-NDArrays" tabindex="-1">Slicing NDArrays <a class="header-anchor" href="#Slicing-NDArrays" aria-label="Permalink to &quot;Slicing NDArrays {#Slicing-NDArrays}&quot;">â€‹</a></h2><p>TODO</p><h2 id="Linear-Algebra-Operations" tabindex="-1">Linear Algebra Operations <a class="header-anchor" href="#Linear-Algebra-Operations" aria-label="Permalink to &quot;Linear Algebra Operations {#Linear-Algebra-Operations}&quot;">â€‹</a></h2><p>Matrix multiplicaiton is only implemented through <code>mul!</code>. Calling the <code>*</code> operator on a pair of 2D NDArrays will perform elementwise multiplication.</p><h4 id="Implemented-Linear-Algebra-Operations" tabindex="-1">Implemented Linear Algebra Operations <a class="header-anchor" href="#Implemented-Linear-Algebra-Operations" aria-label="Permalink to &quot;Implemented Linear Algebra Operations {#Implemented-Linear-Algebra-Operations}&quot;">â€‹</a></h4><ul><li><code>LinearAlgebra.mul!</code></li></ul><h2 id="Unary-Operations" tabindex="-1">Unary Operations <a class="header-anchor" href="#Unary-Operations" aria-label="Permalink to &quot;Unary Operations {#Unary-Operations}&quot;">â€‹</a></h2><p>All unary operations will return a new NDArray and are broadcast over an NDarray even without the <code>.</code> broadcasting syntax. In the current state, <code>.</code> broadcasting syntax will not work (e.g. <code>sin.(arr)</code>).</p><p>Unary operators can also be called with <code>map</code>. For example</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, arr)</span></span></code></pre></div><h4 id="Implemented-Unary-Operations" tabindex="-1">Implemented Unary Operations <a class="header-anchor" href="#Implemented-Unary-Operations" aria-label="Permalink to &quot;Implemented Unary Operations {#Implemented-Unary-Operations}&quot;">â€‹</a></h4><ul><li><p><code>Base.abs</code></p></li><li><p><code>Base.acos</code></p></li><li><p><code>Base.asin</code></p></li><li><p><code>Base.asinh</code></p></li><li><p><code>Base.atanh</code></p></li><li><p><code>Base.cbrt</code></p></li><li><p><code>Base.conj</code></p></li><li><p><code>Base.cos</code></p></li><li><p><code>Base.cosh</code></p></li><li><p><code>Base.deg2rad</code></p></li><li><p><code>Base.exp</code></p></li><li><p><code>Base.expm1</code></p></li><li><p><code>Base.floor</code></p></li><li><p><code>Base.log</code></p></li><li><p><code>Base.log10</code></p></li><li><p><code>Base.log1p</code></p></li><li><p><code>Base.log2</code></p></li><li><p><code>Base.:(-)</code></p></li><li><p><code>Base.rad2deg</code></p></li><li><p><code>Base.sin</code></p></li><li><p><code>Base.sinh</code></p></li><li><p><code>Base.sqrt</code></p></li><li><p><code>Base.tan</code></p></li><li><p><code>Base.tanh</code></p></li></ul><h2 id="Unary-Reductions" tabindex="-1">Unary Reductions <a class="header-anchor" href="#Unary-Reductions" aria-label="Permalink to &quot;Unary Reductions {#Unary-Reductions}&quot;">â€‹</a></h2><p>Unary reductions convert an NDArray to a single number. Unary reductions cannot be called with <code>Base.reduce</code> at this time.</p><h4 id="Implemented-Unary-Reductions" tabindex="-1">Implemented Unary Reductions <a class="header-anchor" href="#Implemented-Unary-Reductions" aria-label="Permalink to &quot;Implemented Unary Reductions {#Implemented-Unary-Reductions}&quot;">â€‹</a></h4><ul><li><p><code>Base.all</code></p></li><li><p><code>Base.any</code></p></li><li><p><code>Base.maximum</code></p></li><li><p><code>Base.minimum</code></p></li><li><p><code>Base.prod</code></p></li><li><p><code>Base.sum</code></p></li></ul><h2 id="Binary-Operations" tabindex="-1">Binary Operations <a class="header-anchor" href="#Binary-Operations" aria-label="Permalink to &quot;Binary Operations {#Binary-Operations}&quot;">â€‹</a></h2><p>All binary operations will return a new NDArray and are broadcast over an NDarray even without the <code>.</code> broadcasting syntax. In the current state, <code>.</code> broadcasting syntax will not work (e.g. <code>sin.(arr)</code>).</p><p>Binary operators can also be called with <code>map</code>. For example</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr1, arr2)</span></span></code></pre></div><h4 id="Implemented-Binary-Operations" tabindex="-1">Implemented Binary Operations <a class="header-anchor" href="#Implemented-Binary-Operations" aria-label="Permalink to &quot;Implemented Binary Operations {#Implemented-Binary-Operations}&quot;">â€‹</a></h4><ul><li><p><code>Base.:(+)</code></p></li><li><p><code>Base.atan</code></p></li><li><p><code>Base.:(/)</code></p></li><li><p><code>Base.:(^)</code></p></li><li><p><code>Base.div</code></p></li><li><p><code>Base.hypot</code></p></li><li><p><code>Base.:(*)</code></p></li><li><p><code>Base.(-)</code></p></li></ul><h2 id="Timing-cuNumeric.jl-Code" tabindex="-1">Timing cuNumeric.jl Code <a class="header-anchor" href="#Timing-cuNumeric.jl-Code" aria-label="Permalink to &quot;Timing cuNumeric.jl Code {#Timing-cuNumeric.jl-Code}&quot;">â€‹</a></h2><p>These timers will block until all prior Legate operations are complete.</p><ul><li><p><code>get_time_microseconds</code></p></li><li><p><code>get_time_nanoseconds</code></p></li></ul>`,30))])}const J=p(d,[["render",P]]);export{z as __pageData,J as default};
