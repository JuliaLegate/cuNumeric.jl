import{_ as l,C as r,c as t,o as p,aA as e,j as a,G as n,a as o,w as d}from"./chunks/framework.BLF_ld5H.js";const A=JSON.parse('{"title":"Public API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),h={name:"api.md"},c={class:"jldocstring custom-block",open:""};function k(u,i,y,g,m,E){const s=r("Badge");return p(),t("div",null,[i[4]||(i[4]=e('<h1 id="Public-API" tabindex="-1">Public API <a class="header-anchor" href="#Public-API" aria-label="Permalink to &quot;Public API {#Public-API}&quot;">​</a></h1><p>User facing functions supported by cuNumeric.jl</p><ul><li><a href="./api#Public-API">Public API</a><ul><li><a href="./api#Initializing-NDArrays">Initializing NDArrays</a></li><li><a href="./api#Slicing-NDArrays">Slicing NDArrays</a></li><li><a href="./api#Linear-Algebra-Operations">Linear Algebra Operations</a></li><li><a href="./api#Unary-Operations">Unary Operations</a></li><li><a href="./api#Unary-Reductions">Unary Reductions</a></li><li><a href="./api#Binary-Operations">Binary Operations</a></li><li><a href="./api#Timing-cuNumeric.jl-Code">Timing cuNumeric.jl Code</a></li></ul></li></ul>',3)),a("details",c,[a("summary",null,[i[0]||(i[0]=a("a",{id:"cuNumeric.versioninfo-Tuple{}",href:"#cuNumeric.versioninfo-Tuple{}"},[a("span",{class:"jlbinding"},"cuNumeric.versioninfo")],-1)),i[1]||(i[1]=o()),n(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[3]||(i[3]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints the cuNumeric build configuration summary, including package metadata, Julia and compiler version, and paths to core dependencies.</p>',2)),n(s,{type:"info",class:"source-link",text:"source"},{default:d(()=>i[2]||(i[2]=[a("a",{href:"https://github.com/JuliaLegate/cuNumeric.jl/blob/92c6b44468fc5d475b2743d13b2deeed1754f2f7/src/cuNumeric.jl#L130-L135",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i[5]||(i[5]=e(`<h2 id="Initializing-NDArrays" tabindex="-1">Initializing NDArrays <a class="header-anchor" href="#Initializing-NDArrays" aria-label="Permalink to &quot;Initializing NDArrays {#Initializing-NDArrays}&quot;">​</a></h2><p>The CuPyNumeric C++ API only supports generating Float64 random numbers. The example below shows how you can get Float32 random numbers by casting. We plan to make this easier through <code>Base.convert</code> or by getting Float32 generating added to CuPyNumeric.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr_fp64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr_fp32 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr_fp64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LegateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32))</span></span></code></pre></div><h4 id="Methods-to-intiailize-NDArrays" tabindex="-1">Methods to intiailize NDArrays <a class="header-anchor" href="#Methods-to-intiailize-NDArrays" aria-label="Permalink to &quot;Methods to intiailize NDArrays {#Methods-to-intiailize-NDArrays}&quot;">​</a></h4><ul><li><p><code>cuNumeric.zeros</code></p></li><li><p><code>cuNumeric.full</code></p></li><li><p><code>Random.rand!</code></p></li><li><p><code>Random.rand</code></p></li></ul><h2 id="Slicing-NDArrays" tabindex="-1">Slicing NDArrays <a class="header-anchor" href="#Slicing-NDArrays" aria-label="Permalink to &quot;Slicing NDArrays {#Slicing-NDArrays}&quot;">​</a></h2><p>TODO</p><h2 id="Linear-Algebra-Operations" tabindex="-1">Linear Algebra Operations <a class="header-anchor" href="#Linear-Algebra-Operations" aria-label="Permalink to &quot;Linear Algebra Operations {#Linear-Algebra-Operations}&quot;">​</a></h2><p>Matrix multiplicaiton is only implemented through <code>mul!</code>. Calling the <code>*</code> operator on a pair of 2D NDArrays will perform elementwise multiplication.</p><h4 id="Implemented-Linear-Algebra-Operations" tabindex="-1">Implemented Linear Algebra Operations <a class="header-anchor" href="#Implemented-Linear-Algebra-Operations" aria-label="Permalink to &quot;Implemented Linear Algebra Operations {#Implemented-Linear-Algebra-Operations}&quot;">​</a></h4><ul><li><code>LinearAlgebra.mul!</code></li></ul><h2 id="Unary-Operations" tabindex="-1">Unary Operations <a class="header-anchor" href="#Unary-Operations" aria-label="Permalink to &quot;Unary Operations {#Unary-Operations}&quot;">​</a></h2><p>All unary operations will return a new NDArray and are broadcast over an NDarray even without the <code>.</code> broadcasting syntax. In the current state, <code>.</code> broadcasting syntax will not work (e.g. <code>sin.(arr)</code>).</p><p>Unary operators can also be called with <code>map</code>. For example</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sqrt, arr)</span></span></code></pre></div><h4 id="Implemented-Unary-Operations" tabindex="-1">Implemented Unary Operations <a class="header-anchor" href="#Implemented-Unary-Operations" aria-label="Permalink to &quot;Implemented Unary Operations {#Implemented-Unary-Operations}&quot;">​</a></h4><ul><li><p><code>Base.abs</code></p></li><li><p><code>Base.acos</code></p></li><li><p><code>Base.asin</code></p></li><li><p><code>Base.asinh</code></p></li><li><p><code>Base.atanh</code></p></li><li><p><code>Base.cbrt</code></p></li><li><p><code>Base.conj</code></p></li><li><p><code>Base.cos</code></p></li><li><p><code>Base.cosh</code></p></li><li><p><code>Base.deg2rad</code></p></li><li><p><code>Base.exp</code></p></li><li><p><code>Base.expm1</code></p></li><li><p><code>Base.floor</code></p></li><li><p><code>Base.log</code></p></li><li><p><code>Base.log10</code></p></li><li><p><code>Base.log1p</code></p></li><li><p><code>Base.log2</code></p></li><li><p><code>Base.:(-)</code></p></li><li><p><code>Base.rad2deg</code></p></li><li><p><code>Base.sin</code></p></li><li><p><code>Base.sinh</code></p></li><li><p><code>Base.sqrt</code></p></li><li><p><code>Base.tan</code></p></li><li><p><code>Base.tanh</code></p></li></ul><h2 id="Unary-Reductions" tabindex="-1">Unary Reductions <a class="header-anchor" href="#Unary-Reductions" aria-label="Permalink to &quot;Unary Reductions {#Unary-Reductions}&quot;">​</a></h2><p>Unary reductions convert an NDArray to a single number. Unary reductions cannot be called with <code>Base.reduce</code> at this time.</p><h4 id="Implemented-Unary-Reductions" tabindex="-1">Implemented Unary Reductions <a class="header-anchor" href="#Implemented-Unary-Reductions" aria-label="Permalink to &quot;Implemented Unary Reductions {#Implemented-Unary-Reductions}&quot;">​</a></h4><ul><li><p><code>Base.all</code></p></li><li><p><code>Base.any</code></p></li><li><p><code>Base.maximum</code></p></li><li><p><code>Base.minimum</code></p></li><li><p><code>Base.prod</code></p></li><li><p><code>Base.sum</code></p></li></ul><h2 id="Binary-Operations" tabindex="-1">Binary Operations <a class="header-anchor" href="#Binary-Operations" aria-label="Permalink to &quot;Binary Operations {#Binary-Operations}&quot;">​</a></h2><p>All binary operations will return a new NDArray and are broadcast over an NDarray even without the <code>.</code> broadcasting syntax. In the current state, <code>.</code> broadcasting syntax will not work (e.g. <code>sin.(arr)</code>).</p><p>Binary operators can also be called with <code>map</code>. For example</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cuNumeric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NDArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr1, arr2)</span></span></code></pre></div><h4 id="Implemented-Binary-Operations" tabindex="-1">Implemented Binary Operations <a class="header-anchor" href="#Implemented-Binary-Operations" aria-label="Permalink to &quot;Implemented Binary Operations {#Implemented-Binary-Operations}&quot;">​</a></h4><ul><li><p><code>Base.:(+)</code></p></li><li><p><code>Base.atan</code></p></li><li><p><code>Base.:(/)</code></p></li><li><p><code>Base.:(^)</code></p></li><li><p><code>Base.div</code></p></li><li><p><code>Base.hypot</code></p></li><li><p><code>Base.:(*)</code></p></li><li><p><code>Base.(-)</code></p></li></ul><h2 id="Timing-cuNumeric.jl-Code" tabindex="-1">Timing cuNumeric.jl Code <a class="header-anchor" href="#Timing-cuNumeric.jl-Code" aria-label="Permalink to &quot;Timing cuNumeric.jl Code {#Timing-cuNumeric.jl-Code}&quot;">​</a></h2><p>These timers will block until all prior Legate operations are complete.</p><ul><li><p><code>get_time_microseconds</code></p></li><li><p><code>get_time_nanoseconds</code></p></li></ul>`,30))])}const B=l(h,[["render",k]]);export{A as __pageData,B as default};
