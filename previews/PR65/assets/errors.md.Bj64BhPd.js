import{_ as a,c as i,o as e,aA as t}from"./chunks/framework.D9FzpcLH.js";const u=JSON.parse('{"title":"Common Errors","description":"","frontmatter":{},"headers":[],"relativePath":"errors.md","filePath":"errors.md","lastUpdated":null}'),n={name:"errors.md"};function r(o,s,l,h,p,d){return e(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="Common-Errors" tabindex="-1">Common Errors <a class="header-anchor" href="#Common-Errors" aria-label="Permalink to &quot;Common Errors {#Common-Errors}&quot;">​</a></h1><h3 id="1-ERROR:-LoadError:-JULIALEGATEXXXX_PATH-not-found-via-environment-or-JLL." tabindex="-1">[1] ERROR: LoadError: JULIA_LEGATE_XXXX_PATH not found via environment or JLL. <a class="header-anchor" href="#1-ERROR:-LoadError:-JULIALEGATEXXXX_PATH-not-found-via-environment-or-JLL." aria-label="Permalink to &quot;[1] ERROR: LoadError: JULIA_LEGATE_XXXX_PATH not found via environment or JLL. {#1-ERROR:-LoadError:-JULIALEGATEXXXX_PATH-not-found-via-environment-or-JLL.}&quot;">​</a></h3><p>This can occur for several reasons; however, this means the JLL is not available. For the library that failed, you can overwrite an ENV to use a custom install.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JULIA_LEGATE_XXXX_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/library/failing&quot;</span></span></code></pre></div><p>However, if you want to solve the JLL being available- you need the cuda driver <code>libcuda.so</code> on your path and cuda runtime <code>libcudart.so</code> on your path. You can use JLLs to achieve this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;LD_LIBRARY_PATH=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=[yourenv]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;using Pkg; \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Pkg.add(name = \\&quot;CUDA_Driver_jll\\&quot;, version = \\&quot;0.12.1\\&quot;); \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    using CUDA_Driver_jll; \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    print(joinpath(CUDA_Driver_jll.artifact_dir, &quot;lib&quot;))&#39; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">):</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$LD_LIBRARY_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>Note: You may use a different compatible driver version, but ensure it works with our supported CUDA toolkit/runtime versions (12.2 – 12.9). CUDA runtime 13.0 is untested and will likely break this package.</p>`,7)])])}const c=a(n,[["render",r]]);export{u as __pageData,c as default};
