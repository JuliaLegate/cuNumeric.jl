import{_ as i,c as s,o as a,aA as n}from"./chunks/framework.Dmj7Cwgt.js";const u=JSON.parse('{"title":"Build Options","description":"","frontmatter":{},"headers":[],"relativePath":"install.md","filePath":"install.md","lastUpdated":null}'),t={name:"install.md"};function l(o,e,c,d,p,h){return a(),s("div",null,e[0]||(e[0]=[n(`<h1 id="Build-Options" tabindex="-1">Build Options <a class="header-anchor" href="#Build-Options" aria-label="Permalink to &quot;Build Options {#Build-Options}&quot;">​</a></h1><p>By default <code>cuNumeric.jl</code> will install cupynumeric with <a href="https://github.com/JuliaPy/Conda.jl" target="_blank" rel="noreferrer">Conda.jl</a> into a new conda environment stored inside the <code>.julia/conda</code> directory.</p><p>To customize the build process create a <code>LocalPreferences.toml</code> file in the same directory as the <code>Project.toml</code> where <code>cuNumeric.jl</code> is installed (or in the cuNumeric.jl git repo).</p><p>The <code>LocalPreferences.toml</code> defines 3 keys : <code>mode</code>, <code>conda_jl_env</code>, and <code>user_env</code>.</p><p>The <code>mode</code> option can be either:</p><ul><li><p>&quot;local_env&quot; : cuNumeric.jl will link against a local install of cupynumeric</p></li><li><p>&quot;conda_jl&quot; : cuNumeric.jl will use Conda.jl to install cupynumeric</p></li></ul><p>When <code>mode</code> is set to <code>local_env</code> the <code>user_env</code> option must be defined as the absolute path to the conda environment with cupynumeric installed (e.g., the value of CONDA_PREFIX when your environment is active). For me this path is: <code>/home/emeitz/.conda/envs/cunumeric-gpu</code>.</p><p>The <code>conda_jl</code> mode only needs to be set if you previously used a local environment and want to switch back to a Conda.jl install. The <code>conda_jl_env</code> key will set the name of the environment created by Conda.jl, by default this is just cupynumeric.</p><p>The <code>LocalPreferences.toml</code> might look like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[cuNumeric]</span></span>
<span class="line"><span>mode = &quot;local_env&quot;</span></span>
<span class="line"><span>conda_jl_env = &quot;cupynumeric&quot;</span></span>
<span class="line"><span>user_env = &quot;/home/emeitz/.conda/envs/cunumeric-gpu&quot;</span></span></code></pre></div><p>After setting the <code>LocalPreferences.toml</code> you must re-build cuNumeric.jl by running:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;using Pkg; Pkg.build()&#39;</span></span></code></pre></div><h2 id="Using-Local-CUDA" tabindex="-1">Using Local CUDA <a class="header-anchor" href="#Using-Local-CUDA" aria-label="Permalink to &quot;Using Local CUDA {#Using-Local-CUDA}&quot;">​</a></h2><p>A common reason to link against an existing environment is to avoid cupynumeric re-installing the entire CUDA toolkit. To make your own conda environment built off an existing CUDA install run the following with whatever version of CUDA is on the <code>LD_LIBRARY_PATH</code> in place of 12.2.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> activate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myenv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CONDA_OVERRIDE_CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12.2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  conda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conda-forge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> legate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cupynumeric</span></span></code></pre></div>`,15)]))}const k=i(t,[["render",l]]);export{u as __pageData,k as default};
